{"ast":null,"code":"import api from '../../utils/axios/api';\nimport { AUTH_SUCCESS, AUTH_FAIL, ACTIVATE_SUCCESS, ACTIVATE_FAIL, REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, LOADING } from '../actions/types'; // SIGNUP USER\n\nexport const register = _ref => {\n  let {\n    firstname,\n    lastname,\n    username,\n    email,\n    phone,\n    dob,\n    gender,\n    password,\n    passcode\n  } = _ref;\n  return dispatch => {\n    // Headers\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // Request Body\n\n    const body = JSON.stringify({\n      firstname,\n      lastname,\n      username,\n      email,\n      phone,\n      dob,\n      gender,\n      password,\n      passcode\n    });\n    api.post('/api/users/register', body, config).then(response => {\n      console.log(response);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      console.log(error.response);\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: error.response\n      });\n    });\n  };\n}; // LOGIN USER\n\nexport const login = _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n  return dispatch => {\n    // Headers\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }; // Request Body\n\n    const body = JSON.stringify({\n      username,\n      password\n    });\n    api.post('/api/users/login', body, config).then(response => {\n      console.log(response);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: response\n      });\n    }).catch(error => {\n      console.log(error.response);\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: error.response\n      });\n    });\n  };\n};\nexport const authenticate = () => (dispatch, getState) => {\n  // Account Activated\n  dispatch({\n    type: LOADING\n  });\n  api.get('/api/users/auth', tokenConfig(getState)).then(response => {\n    //console.log(response);\n    dispatch({\n      type: AUTH_SUCCESS,\n      payload: response\n    });\n  }).catch(error => {\n    //console.log(error.response);\n    dispatch({\n      type: AUTH_FAIL,\n      payload: error.response\n    });\n  });\n}; // LOGOUT USER\n\nexport const logout = () => (dispatch, getState) => {\n  api.get('/api/users/logout', tokenConfig(getState)).then(response => {\n    console.log(response.data);\n    dispatch({\n      type: LOGOUT_SUCCESS,\n      payload: response\n    });\n  }).catch(error => {\n    console.log(error.response);\n    dispatch({\n      type: LOGOUT_SUCCESS,\n      payload: error.response\n    });\n  });\n}; // Setup config with token - helper function\n\nexport const tokenConfig = getState => {\n  // Get token from state\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // If token, add to headers config\n\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n\n  return config;\n};","map":{"version":3,"names":["api","AUTH_SUCCESS","AUTH_FAIL","ACTIVATE_SUCCESS","ACTIVATE_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","LOADING","register","firstname","lastname","username","email","phone","dob","gender","password","passcode","dispatch","config","headers","body","JSON","stringify","post","then","response","console","log","type","payload","catch","error","login","authenticate","getState","get","tokenConfig","logout","data","token","auth"],"sources":["/Users/jameswyse/Desktop/Projects/PRODUCTION/PROJECT_HEROKU/app/frontend/src/redux/actions/auth.js"],"sourcesContent":["import api from '../../utils/axios/api';\nimport {\n  AUTH_SUCCESS,\n  AUTH_FAIL,\n  ACTIVATE_SUCCESS,\n  ACTIVATE_FAIL,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  LOADING,\n} from '../actions/types';\n\n\n\n// SIGNUP USER\nexport const register = ({ firstname, lastname, username, email, phone, dob, gender, password, passcode }) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  // Request Body\n  const body = JSON.stringify({ firstname, lastname, username, email, phone, dob, gender, password, passcode });\n\n  api\n    .post('/api/users/register', body, config)\n    .then((response) => {\n      console.log(response);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: response,\n      });\n    })\n    .catch((error) => {\n      console.log(error.response);\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: error.response,\n      });\n    });\n};\n\n\n// LOGIN USER\nexport const login = ({ username, password }) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  // Request Body\n  const body = JSON.stringify({ username, password });\n\n  api\n    .post('/api/users/login', body, config)\n    .then((response) => {\n      console.log(response);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: response,\n      });\n    })\n    .catch((error) => {\n      console.log(error.response);\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: error.response,\n      });\n    });\n};\n\n\n\nexport const authenticate = () => (dispatch, getState) => {\n  // Account Activated\n  dispatch({ type: LOADING });\n\n  api\n    .get('/api/users/auth', tokenConfig(getState))\n    .then((response) => {\n      //console.log(response);\n      dispatch({\n        type: AUTH_SUCCESS,\n        payload: response,\n      });\n    })\n    .catch((error) => {\n      //console.log(error.response);\n      dispatch({\n        type: AUTH_FAIL,\n        payload: error.response,\n      });\n    });\n};\n\n\n\n// LOGOUT USER\nexport const logout = () => (dispatch, getState) => {\n  api\n    .get('/api/users/logout', tokenConfig(getState))\n    .then((response) => {\n      console.log(response.data);\n      dispatch({\n        type: LOGOUT_SUCCESS,\n        payload: response,\n      });\n    })\n    .catch((error) => {\n      console.log(error.response);\n      dispatch({\n        type: LOGOUT_SUCCESS,\n        payload: error.response,\n      });\n    });\n};\n\n\n\n\n\n// Setup config with token - helper function\nexport const tokenConfig = (getState) => {\n  // Get token from state\n  const token = getState().auth.token;\n  \n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  // If token, add to headers config\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  } \n  return config;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}